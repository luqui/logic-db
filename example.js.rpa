// A Stream is a structure with head, tail, and cons, satisfying
//   head(cons(x,y)) = x
//   tail(cons(x,y)) = y

// This is a javascript array-based implementation of streams.

------------------
Stream[ head, tail, cons, style: 'array ]

head = function(s) { return s[0] }
tail = function(s) { return s.slice(1) }
cons = function(h,t) { return [h].concat(t) }

==================

// This is a church encoding implementation of streams.

--------------
Stream[ head, tail, cons, style: 'church ]

head = function(s) { return s(function(h,t) { return h }) }
tail = function(s) { return s(function(h,t) { return t }) }
cons = function(h,t) { return function(f) { return f(h,t) } }

==================

// A Thunk wraps around a pure function and caches the return value the
// first time it is evaluated.

------------------
Thunk[ thunk ]

thunk = function(f) { 
    var cell = null;
    return function() {
        if (cell) {
            return cell[0];
        }
        else {
            cell = [f()];
            return cell[0];
        }
    }
}


==================

// A logger simply provides a logger() function, which writes out some information
// to a log.

-------------
Logger[ logger ]

logger = console.log
console literal

==================

// An example which logs "1", roundabout using a stream.

Logger[ logger: log ]
Stream[ head, tail, cons, style ]
-------------
Example[ ex, style ]

ex = function() { 
    log(head(tail(cons(0,cons(1,null)))));
}
